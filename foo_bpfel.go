// Code generated by bpf2go; DO NOT EDIT.
// +build 386 amd64 amd64p32 arm arm64 mips64le mips64p32le mipsle ppc64le riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadFoo returns the embedded CollectionSpec for foo.
func loadFoo() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_FooBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load foo: %w", err)
	}

	return spec, err
}

// loadFooObjects loads foo and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *fooObjects
//     *fooPrograms
//     *fooMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadFooObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadFoo()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// fooSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type fooSpecs struct {
	fooProgramSpecs
	fooMapSpecs
}

// fooSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type fooProgramSpecs struct {
	VfsReadEntry *ebpf.ProgramSpec `ebpf:"vfs_read_entry"`
}

// fooMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type fooMapSpecs struct {
	MountNsSet *ebpf.MapSpec `ebpf:"mount_ns_set"`
}

// fooObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadFooObjects or ebpf.CollectionSpec.LoadAndAssign.
type fooObjects struct {
	fooPrograms
	fooMaps
}

func (o *fooObjects) Close() error {
	return _FooClose(
		&o.fooPrograms,
		&o.fooMaps,
	)
}

// fooMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadFooObjects or ebpf.CollectionSpec.LoadAndAssign.
type fooMaps struct {
	MountNsSet *ebpf.Map `ebpf:"mount_ns_set"`
}

func (m *fooMaps) Close() error {
	return _FooClose(
		m.MountNsSet,
	)
}

// fooPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadFooObjects or ebpf.CollectionSpec.LoadAndAssign.
type fooPrograms struct {
	VfsReadEntry *ebpf.Program `ebpf:"vfs_read_entry"`
}

func (p *fooPrograms) Close() error {
	return _FooClose(
		p.VfsReadEntry,
	)
}

func _FooClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed foo_bpfel.o
var _FooBytes []byte
